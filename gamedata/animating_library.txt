"Games"
{
	"#default"
	{
		"Offsets"
		{
			"OS"
			{
				"linux"			"1"
				"windows"		"0"
			}
		}
	}

    //-----------------------------------------------------------------------
    // feel free to use any of these signatures and offsets if you need one. 
    // all found by blueblur.
    //-----------------------------------------------------------------------

    "left4dead2"
    {
        "Addresses"
        {
            //---------------------------
            // Global variables Address
            //---------------------------

            "g_HighestActivity"
            {
                "linux"
                {
                    "signature" "g_HighestActivity"
                }
                
                "windows"
                {
                    "signature" "ActivityList_RegisterPrivateActivity"
                    "offset"    "0x45"  // sub_10002680+43   8B 15 D0 F2 7C 10                 mov     edx, dword_107CF2D0
                }
            }

            //---------------------------------
            // Relative function call Address
            //---------------------------------

            "CBaseAnimating::FindBodyGroupByName"
            {
                "linux"
                {
                    "signature" "CBaseAnimating::FindBodyGroupByName"
                }

                "windows"
                {
                    "signature" "Infected::SetDamagedBodyGroupVariant"
                    "offset"    "0x1D"  // sub_10403930+1C   E8 (here)[EF] F1 C2 FF    call    sub_10032B40
                }
            }

            "CBaseAnimaating::GetBodyGroupName"
            {
                "linux"
                {
                    "signature" "CBaseAnimating::GetBodyGroupName"
                }

                "windows"
                {
                    // so we just call this directly.
                    "signature" "GetBodygroupName"
                }
            }

            "CBaseAnimating::GetBodyGroupCount"
            {
                "linux"
                {
                    "signature" "CBaseAnimating::GetBodyGroupCount"
                }

                "windows"
                {
                    "signature" "Infected::SetDamagedBodyGroupVariant"
                    "offset"    "0xB1"  // sub_10403930+B1   E8 AA F1 C2 FF                    call    sub_10032B90
                }
            }

            "CBaseAnimating::GetSequenceName"
            {
                "linux"
                {
                    "signature" "CBaseAnimating::GetSequenceName"
                }

                "windows"
                {
                    "signature" "CBaseAnimating::ResetSequence"
                    "offset"    "0x39" // sub_10038B90+39   E8 A2 8E FF FF                    call    sub_10031A70
                }
            }

            "CBaseAnimating::GetSequenceActivityName"
            {
                "linux"
                {
                    "signature" "CBaseAnimating::GetSequenceActivityName"
                }

                "windows"
                {
                    "signature" "Infected::DrawDebugTextOverlays"
                    "offset"    "0x13F" // sub_103FFEA0+13F  E8 EC 1A C3 FF                    call    sub_10031AD0
                }
            }

            "CBaseAnimating::LookupSequence"
            {
                "linux"
                {
                    "signature" "CBaseAnimating::LookupSequence"
                }

                "windows"
                {
                    "signature" "CDynamicProp::PropSetAnim"
                    "offset"    "0xF"   // sub_10196990+F    E8 9C AE E9 FF                    call    sub_10031840
                }
            }

            "CBaseAnimating::LookupBone"
            {
                "linux"
                {
                    "signature" "CBaseAnimating::LookupBone"
                }
                "windows"
                {
                    "signature" "CTankClaw::DoSwing"
                    "offset"    "0x6D" // sub_103E6D90+6D   E8 2E B1 C4 FF                    call    sub_10031F30
                }
            }
        }

        "Offsets"
        {
            //-------------------------------
            // Class/Struct property offsets
            //-------------------------------

            "CBaseAnimating->m_pStudioHdr"
            {
                "linux"     "5088"  // 0x13E0
                "windows"   "5072"  // 0x13D0
            }

            // Big Thanks to LuqS, it turns out this offset applied to csgo and l4d2 as well.
            // pStudioHdr->numbones() is called by many functions. grab any of them, find the pointer to it,
            // see what var could possibly be relative to bone numbers returned by the pointer + offset.
            "studiohdr_t->numbones"
            {
                "linux"	    "156"
                "windows"	"156"
            }

            //--------------------------
            // Virtual function offsets
            //--------------------------

            "CBaseAnimating::GetBaseAnimating"
            {
                "linux"     "60"
                "windows"   "59"
            }

            "CBaseAnimating::CanBecomeRagdoll"
            {
                "linux"     "212"
                "windows"   "211"
            }

            "CBaseAnimating::BecomeRagdollOnClient"
            {
                "linux"     "210"
                "windows"   "209"
            }

            "CBaseAnimating::SelectWeightedSequence"
            {
                "linux"     "208"
                "windows"   "207"
            }

            "CBaseAnimating::SetModel"
            {
                "linux"     "28"
                "windows"   "27"
            }
        }

        "Signatures"
        {
            //---------------------------
            // Global variable addresses
            //---------------------------

            "g_HighestActivity"
            {
                "library"   "server"
                "linux"     "@_ZL17g_HighestActivity"
            }

            //-----------------------------------------
            // Relative function call target functions
            //-----------------------------------------

            // search for string "D%d_%c%d_%s"
            "Infected::SetDamagedBodyGroupVariant"
            {
                "library"   "server"
                "windows"   "\x55\x8B\xEC\x83\xEC\x3C\xA1\x2A\x2A\x2A\x2A\x33\xC5\x89\x45\xFC\x8B\x45\x08\x53\x56"
                /* 55 8B EC 83 EC 3C A1 ? ? ? ? 33 C5 89 45 FC 8B 45 08 53 56 */
            }

            // search for string "Find a bodygroup id by name" to find GetScriptDesc<CBaseAnimating>
            // right above the string there's an array with element represents [10] (vxx[10]), the call next to it is CBaseAnimating::GetBodygroupName
            // click into it, the last call is GetBodygroupName
            "GetBodygroupName"
            {
                "library"   "server"
                "windows"   "\x55\x8B\xEC\x8B\x45\x08\x85\xC0\x75\x2A\xB8\x2A\x2A\x2A\x2A\x5D\xC3\x8B\x00"
                /* 55 8B EC 8B 45 08 85 C0 75 ? B8 ? ? ? ? 5D C3 8B 00 */
            }

            // search for string "Dynamic prop %s: no sequence named:%s\n"
            // (two matched results, choose the short one)
            "CDynamicProp::PropSetAnim"
            {
                "library"   "server"
                "windows"   "\x55\x8B\xEC\x56\x57\x8B\x7D\x08\x8B\xF1\x85\xFF\x74\x2A\x57\xE8\x2A\x2A\x2A\x2A\x8B\xCE"
                /* 55 8B EC 56 57 8B 7D 08 8B F1 85 FF 74 ? 57 E8 ? ? ? ? 8B CE */
            }

            // search for string "ValveBiped.Bip01_L_Hand" to find CTankClaw::DoSwing
            "CTankClaw::DoSwing"
            {
                "library"   "server"
                "windows"   "\x55\x8B\xEC\x83\xEC\x20\x56\x89\x4D\xF8"
                /* 55 8B EC 83 EC 20 56 89 4D F8 */
            }

            // search for string "Layer %d (%s): order %d weight %f cycle %f"
            "Infected::DrawDebugTextOverlays"
            {
                "library"   "server"
                "windows"   "\x55\x8B\xEC\x81\xEC\x08\x08\x00\x00\xA1\x2A\x2A\x2A\x2A\x33\xC5\x89\x45\xFC\x53\x56\x57\x8B\xF1"
                /* 55 8B EC 81 EC 08 08 00 00 A1 ? ? ? ? 33 C5 89 45 FC 53 56 57 8B F1 */
            }

            //--------------------------------
            // CBaseAnimating functions
            //--------------------------------

            "CBaseAnimating::FindBodyGroupByName"
            {
                "library"   "server"
                "linux"     "@_ZN14CBaseAnimating19FindBodygroupByNameEPKc"
            }

            // windows sig:
            // find Infected::SetDamagedBodyGroupVariant follow the description above.
            // down the buttom of the function, the call below the RandomInt() is CBaseAnimating::SetBodyGroup.
            "CBaseAnimating::SetBodyGroup"
            {
                "library"   "server"
                "linux"     "@_ZN14CBaseAnimating12SetBodygroupEii"
                "wwindows"  "\x55\x8B\xEC\x56\x57\x8B\x7D\x08\x8B\xF1\x85\xFF\x0F\x88\x2A\x2A\x2A\x2A\x83\xBE\xD0\x13\x00\x00\x00"
            }

            // windows sig:
            // stll find Infected::SetDamagedBodyGroupVariant
            // at the top of the function, the function below the statement "if ( v4 >= sub_10032BE0(this) )" is CBaseAnimating::GetBodyGroup.
            "CBaseAnimating::GetBodyGroup"
            {
                "library"   "server"
                "linux"     "@_ZN14CBaseAnimating12GetBodygroupEi"
                // may change this with call address in the future. these bytes are too long and may be varied.
                "windows"   "\x55\x8B\xEC\x56\x8B\xF1\x83\xBE\xD0\x13\x00\x00\x00\x75\x2A\xE8\x2A\x2A\x2A\x2A\x85\xC0\x74\x2A\x8B\xCE\xE8\x2A\x2A\x2A\x2A\x8B\x86\xD0\x13\x00\x00\x85\xC0\x74\x2A\x83\x38\x00\x75\x2A\x33\xC0\x8B\x4D\x08\x8B\x96\x48\x04\x00\x00"
                /* 55 8B EC 56 8B F1 83 BE D0 13 00 00 00 75 ? E8 ? ? ? ? 85 C0 74 ? 8B CE E8 ? ? ? ? 8B 86 D0 13 00 00 85 C0 74 ? 83 38 00 75 ? 33 C0 8B 4D 08 8B 96 48 04 00 00 */
            }

            "CBaseAnimating::GetBodyGroupCount"
            {
                "library"   "server"
                "linux"     "@_ZN14CBaseAnimating17GetBodygroupCountEi"
            }

            "CBaseAnimating::GetBodyGroupName"
            {
                "library"   "server"
                "linux"     "@_ZN14CBaseAnimating16GetBodygroupNameEi"
            }
            
            // windows sig:
            // find Infected::SetDamagedBodyGroupVariant follow the description above.
            // on the top of statement "if ( *v7 == 68 )"
            "CBaseAnimating::GetBodyGroupPartName"
            {
                "library"   "server"
                "linux"     "@_ZN14CBaseAnimating20GetBodygroupPartNameEii"
                "windows"   "\x55\x8B\xEC\x56\x8B\xF1\x83\xBE\xD0\x13\x00\x00\x00\x75\x2A\xE8\x2A\x2A\x2A\x2A\x85\xC0\x74\x2A\x8B\xCE\xE8\x2A\x2A\x2A\x2A\x8B\x86\xD0\x13\x00\x00\x5E\x85\xC0\x74\x2A\x83\x38\x00\x75\x2A\x33\xC0\x8B\x4D\x0C"
                // may change this with call address in the future. these bytes are too long and may be varied.
                /* 55 8B EC 56 8B F1 83 BE D0 13 00 00 00 75 ? E8 ? ? ? ? 85 C0 74 ? 8B CE E8 ? ? ? ? 8B 86 D0 13 00 00 5E 85 C0 74 ? 83 38 00 75 ? 33 C0 8B 4D 0C */
            }

            // windows sig:
            // find Infected::SetDamagedBodyGroupVariant follow the description above.
            // inside of the statement "if ( v4 >= sub_10032BE0(this) )"
            "CBaseAnimating::GetNumBodyGroups"
            {
                "library"   "server"
                "linux"     "@_ZN14CBaseAnimating16GetNumBodyGroupsEv"
                "windows"   "\x56\x8B\xF1\x83\xBE\xD0\x13\x00\x00\x00\x75\x2A\xE8\x2A\x2A\x2A\x2A\x85\xC0\x74\x2A\x8B\xCE\xE8\x2A\x2A\x2A\x2A\x8B\x86\xD0\x13\x00\x00\x5E\x85\xC0\x74\x2A\x83\x38\x00\x75\x2A\x33\xC0\x50"
                // may change this with call address in the future. these bytes are too long and may be varied.
                /* 56 8B F1 83 BE D0 13 00 00 00 75 ? E8 ? ? ? ? 85 C0 74 ? 8B CE E8 ? ? ? ? 8B 86 D0 13 00 00 5E 85 C0 74 ? 83 38 00 75 ? 33 C0 50 */
            }

            // windows sig:
            // search for string "UpperBody" with all occurance found, the first one is the target: CInfectedZooPuppet::Spawn
            // (with string like "%d %d %d %d", "LowerBody", "FCVAR_NEVER_AS_STRING" in it.)
            // on the buttom of the function, at the top of the statement "if ( v21 >= 0 )" (within a 'for' statement "for ( j = (int)v23; ; v13 = (_BYTE *)j )")
            // the call is CBaseAnimating::FindBodyGroupVariant.
            "CBaseAnimating::FindBodyGroupVariant"
            {
                "library"   "server"
                "linux"     "@_ZN14CBaseAnimating20FindBodyGroupVariantEii"
                "windows"   "\x55\x8B\xEC\x83\xEC\x08\x53\x56\x57\x33\xF6"
                /* 55 8B EC 83 EC 08 53 56 57 33 F6 */
            }

            // windows sig:
            // find CInfectedZooPuppet::Spawn as above
            // on the beginning of the function, right under the string "UpperBody"
            // the second call in the 'for statement' (for ( i = 8; i < 0x14; i += 4 )) is CBaseAnimating::CountBodyGroupVariant.
            "CBaseAnimating::CountBodyGroupVariant"
            {
                "library"   "server"
                "linux"     "@_ZN14CBaseAnimating22CountBodyGroupVariantsEi"
                "windows"   "\x55\x8B\xEC\x83\xEC\x08\x53\x56\x57\x33\xDB\x8B\xF9\x89\x5D\xFC\x39\x9F\xD0\x13\x00\x00"
                /* 55 8B EC 83 EC 08 53 56 57 33 DB 8B F9 89 5D FC 39 9F D0 13 00 00 */
            }

            // unused by game.
            "CBaseAnimating::FindDamagedBodyGroupVariant"
            {
                "library"   "server"
                "linux"     "@_ZN14CBaseAnimating27FindDamagedBodyGroupVariantEi"
            }

            // CBaseAnimating::RandomizeBodygroups(CUtlVector<char const*,CUtlMemory<char const*,int>> &)
            // int __cdecl CBaseAnimating::RandomizeBodygroups(CBaseEntity *a1, _DWORD *a2)
            // original: void CBaseAnimating::RandomizeBodygroups( CUtlVector< const char * >& groups )
            // https://github.com/ReactiveDrop/reactivedrop_public_src/blob/0b3a6dcd74dce45e35ca6c0d823fd19ccc610b91/src/game/server/baseanimating.cpp#L2407
            // assumming that this is used to randomize the models for CIs.

            // L4D2/Reactive Drop/TF2(?). not exists in source sdk 2013.
            // sadly, there is no existed method to pass a CultVector to the parameter if we try to use SDKCall.
            // this signature will remain here.

            // windows sig:
            // search for string "SetModelFromClass: Survivor %s changed model from %s to %s via SetModelFromClass\n" or "no_female_boomers" (matched second call) to find CTerrorPlayer::SetModelFromClass
            // at the buttom of the function, the call that is below the string "UpperBody" or "LowerBody" is CBaseAnimating::RandomizeBodygroups.
            "CBaseAnimating::RandomizeBodygroups"
            {
                "library"   "server"
                "linux"     "@_ZN14CBaseAnimating19RandomizeBodygroupsER10CUtlVectorIPKc10CUtlMemoryIS2_iEE"
                "windows"   "\x55\x8B\xEC\x83\xEC\x20\x8B\x45\x08\x53"
                /* 55 8B EC 83 EC 20 8B 45 08 53 */
            }

            // windows sig:
            // search for string "shoved_backward_04j" to find ZombieBotBody::StartActivity
            // down below the string "" there is a call pass the a1 array parameter with index[22] that is it. (sub_10036AA0(a1[22]);)
            "CBaseAnimating::SetSequence"
            {
                "library"   "server"
                "linux"     "@_ZN14CBaseAnimating11SetSequenceEi"
                "windows"   "\x55\x8B\xEC\x53\x8B\x5D\x08\x56\x8B\xF1\x57\x8B\xBE\x80\x04\x00\x00"
                /* 55 8B EC 53 8B 5D 08 56 8B F1 57 8B BE 80 04 00 00 */
            }

            "CBaseAnimating::GetSequenceName"
            {
                "library"   "server"
                "linux"     "@_ZN14CBaseAnimating15GetSequenceNameEi"
            }

            // windows sig:
            // search for string "%f: Infected %d(%s): main sequence is %d\n" or "layer %d: sequence %d(%s), start time %f, order %d, looping %d\n"
            // (I suggest you just copy a sentence from the string and put it in search because I dont know the god damn why the whole string just keeping fail.)
            // the first call is the 'for' statement "for ( i = 0; i < this[1865]; v4 += 24 )" is CBaseAnimating::GetSequenceActivity.
            "CBaseAnimating::GetSequenceActivity"
            {
                "libray"    "server"
                "linux"     "@_ZN14CBaseAnimating19GetSequenceActivityEi"
                "windows"   "\x55\x8B\xEC\x56\x57\x8B\x7D\x08\x8B\xF1\x83\xFF\xFF\x75\x2A\x5F\x83\xC8\xFF"
                /* 55 8B EC 56 57 8B 7D 08 8B F1 83 FF FF 75 ? 5F 83 C8 FF */
            }

            "CBaseAnimating::GetSequenceActivityName"
            {
                "library"   "server"
                "linux"     "@_ZN14CBaseAnimating23GetSequenceActivityNameEi"
            }

            // windows sig:
            // search for string "CSceneEntity %s :\"%s\" unable to find gesture \"%s\"\n" or "vcd error, gesture %s of model %s is marked as STUDIO_LOOPING!\n"
            // to find CBaseFlex::HandleStartGestureSceneEvent
            // right on the top of the string "faceposer", on the top of the statement "if ( j != 0.0 )", the call gives its vallue to 'j' is the call CBaseAnimating::GetSequenceKeyValues
            "CBaseAnimating::GetSequenceKeyValues"
            {
                "library"   "server"
                "linux"     "@_ZN14CBaseAnimating20GetSequenceKeyValuesEi"
                "windows"   "\x55\x8B\xEC\x51\x53\x56\x8B\xF1\x83\xBE\xD0\x13\x00\x00\x00"
                /* 55 8B EC 51 53 56 8B F1 83 BE D0 13 00 00 00 */
            }

            // windows sig:
            // find CBaseAnimating::GetGroundSpeedVelocity in the vtable with offset 221 (for now), which is the only function that calls us. (ignore the null_)
            // in the second 'if' statement, the first call is our target.
            "CBaseAnimating::GetSequenceMoveYaw"
            {
                "library"   "server"
                "linux"     "@_ZN14CBaseAnimating18GetSequenceMoveYawEi"
                "windows"   "\x53\x8B\xDC\x83\xEC\x08\x83\xE4\xF0\x83\xC4\x04\x55\x8B\x6B\x04\x89\x6C\x24\x04\x8B\xEC\x83\xEC\x2C\x56\x8B\xF1\x83\xBE\xD0\x13\x00\x00\x00"
                /* 53 8B DC 83 EC 08 83 E4 F0 83 C4 04 55 8B 6B 04 89 6C 24 04 8B EC 83 EC 2C 56 8B F1 83 BE D0 13 00 00 00 */
            }

            // windows sig:
            // find TankLocomotion::ClimbUpToLedge with string "HulkZombie.StartLedgeClimb", (two call, one of them.)
            // down there where string is, the first call in the statement "if ( v27 != 719 )" is CBaseAnimating::GetSequenceLinearMotion.
            "CBaseAnimating::GetSequenceLinearMotion"
            {
                "library"   "server"
                "linux"     "@_ZN14CBaseAnimating23GetSequenceLinearMotionEiP6Vector"
                "windows"   "\x55\x8B\xEC\x56\x8B\xF1\x83\xBE\xD0\x13\x00\x00\x00\x75\x2A\xE8\x2A\x2A\x2A\x2A\x85\xC0\x74\x2A\x8B\xCE\xE8\x2A\x2A\x2A\x2A\x8B\x86\xD0\x13\x00\x00\x85\xC0\x74\x2A\x83\x38\x00\x75\x2A\x33\xC0\x8B\x4D\x0C"
                /* 55 8B EC 56 8B F1 83 BE D0 13 00 00 00 75 ? E8 ? ? ? ? 85 C0 74 ? 8B CE E8 ? ? ? ? 8B 86 D0 13 00 00 85 C0 74 ? 83 38 00 75 ? 33 C0 8B 4D 0C */
            }

            // windows sig:
            // search for string "NetGesture %d : (%1.3f) %s" to find CTerrorPlayerAnimState::Update (vtable: 3)
            // in the middle of the function, the long long long 'if' statement "if ( v11 && v13 >= *(float *)(a1 + 284) && v14 >= 0 && v14 < sub_101E3D40(LODWORD(v43)) )"
            // inside of it, call that passes many arguments (5) is CBaseAnimating::GetSequenceMovement (I think that is explicit enough.)
            "CBaseAnimating::GetSequenceMovement"
            {
                "library"   "server"
                "linux"     "@_ZN14CBaseAnimating19GetSequenceMovementEiffR6VectorR6QAngle"
                "windows"   "\x55\x8B\xEC\x56\x8B\xF1\x83\xBE\xD0\x13\x00\x00\x00\x75\x2A\xE8\x2A\x2A\x2A\x2A\x85\xC0\x74\x2A\x8B\xCE\xE8\x2A\x2A\x2A\x2A\x8B\x86\xD0\x13\x00\x00\x85\xC0\x74\x2A\x83\x38\x00\x75\x2A\x32\xC0"
                /* 55 8B EC 56 8B F1 83 BE D0 13 00 00 00 75 ? E8 ? ? ? ? 85 C0 74 ? 8B CE E8 ? ? ? ? 8B 86 D0 13 00 00 85 C0 74 ? 83 38 00 75 ? 32 C0 */
            }

            // windows sig:
            // search for string "CBaseAnimating::LastVisibleCycle( %d ) NULL pstudiohdr on %s!\n"
            "CBaseAnimating::LastVisibleCycle"
            {
                "library"   "server"
                "linux"     "@_ZN14CBaseAnimating19GetLastVisibleCycleEP10CStudioHdri"
                "windows"   "\x55\x8B\xEC\x53\x8B\x5D\x08\x56\x8B\xF1\x85\xDB\x75\x2A\x8B\x76\x74"
                /* 55 8B EC 53 8B 5D 08 56 8B F1 85 DB 75 ? 8B 76 74 */
            }

            // windows sig:
            // search for string "CBaseAnimating::SequenceDuration( %d ) NULL pstudiohdr on %s!\n" or "CBaseAnimating::SequenceDuration( %d ) out of range\n"
            "CBaseAnimating::SequenceDuration"
            {
                "library"   "server"
                "linux"     "@_ZN14CBaseAnimating14SequenceDurationEi"
                "windows"   "\x55\x8B\xEC\x56\x8B\x75\x08\x57\x8B\xF9\x85\xF6\x75\x2A\x8B\x47\x74"
                /* 55 8B EC 56 8B 75 08 57 8B F9 85 F6 75 ? 8B 47 74 */
            }

            "CBaseAnimating::LookupSequence"
            {
                "library"   "server"
                "linux"     "@_ZN14CBaseAnimating14LookupSequenceEPKc"
            }

            // windows sig:
            // go to the vtable of CGenericFlexCycler and find CFlexCycler::OnTakeDamage (offset 72) (sub_10074EA0)
            // (count it on youself or use tools.)
            // as you can see the first one is it.
            "CBaseAnimating::IsValidSequence"
            {
                "library"   "server"
                "linux"     "@_ZN14CBaseAnimating14IsValidSequenceEi"
                "windows"   "\x55\x8B\xEC\x56\x8B\xF1\x83\xBE\xD0\x13\x00\x00\x00\x75\x2A\xE8\x2A\x2A\x2A\x2A\x85\xC0\x74\x2A\x8B\xCE\xE8\x2A\x2A\x2A\x2A\x8B\x8E\xD0\x13\x00\x00\x85\xC9"
                /* 55 8B EC 56 8B F1 83 BE D0 13 00 00 00 75 ? E8 ? ? ? ? 85 C0 74 ? 8B CE E8 ? ? ? ? 8B 8E D0 13 00 00 85 C9 */
            }

            // windows sig:
            // search for string "ResetSequence : %s: %s -> %s\n"
            "CBaseAnimating::ResetSequence"
            {
                "library"   "server"
                "linux"     "@_ZN14CBaseAnimating14ResetSequenceEi"
                "windows"   "\x55\x8B\xEC\xA1\x2A\x2A\x2A\x2A\x83\x78\x30\x00\x53\x56\x57\x8B\xF1"
                /* 55 8B EC A1 ? ? ? ? 83 78 30 00 53 56 57 8B F1 */
            }

            // windows sig:
            // search for string "ResetSequenceInfo"
            "CBaseAnimating::ResetSequenceInfo"
            {
                "library"   "server"
                "linux"     "@_ZN14CBaseAnimating17ResetSequenceInfoEv"
                "windows"   "\xA1\x2A\x2A\x2A\x2A\x83\x78\x30\x00\x53\x56\x8B\xF1"
                /* A1 ? ? ? ? 83 78 30 00 53 56 8B F1 */
            }

            // windows sig:
            // find CBaseAnimating::ResetSequenceInfo, through xref it has 11 calls. the third call should be CBaseCombatWeapon::SetIdealActivity.
            // the first call of this function which passes 3 params is it.
            // (stop searching for cbaseentity's vtable it looks like a shit.)
            "CBaseAnimating::FindTransitionSequence"
            {
                "library"   "server"
                "linux"     "@_ZN14CBaseAnimating22FindTransitionSequenceEiiPi"
                "windows"   "\x55\x8B\xEC\x56\x57\x8B\x7D\x10\x8B\xF1\x85\xFF\x75\x2A\x83\xBE\xD0\x13\x00\x00\x00"
                /* 55 8B EC 56 57 8B 7D 10 8B F1 85 FF 75 ? 83 BE D0 13 00 00 00 */
            }

            // windows sig:
            // find GoToSequence first by a string: "error in transition graph: %s to %s\n"
            // it has two result, choose the one with 8 params.
            // the only xref is CBaseAnimating::GotoSequence.
            "CBaseAnimating::GotoSequence"
            {
                "library"   "server"
                "linux"     "@_ZN14CBaseAnimating12GotoSequenceEiffiRiRfS0_"
                "windows"   "\x55\x8B\xEC\x56\x8B\xF1\x83\xBE\xD0\x13\x00\x00\x00\x75\x2A\xE8\x2A\x2A\x2A\x2A\x85\xC0\x74\x2A\x8B\xCE\xE8\x2A\x2A\x2A\x2A\x8B\x86\xD0\x13\x00\x00\x5E\x85\xC0\x74\x2A\x83\x38\x00\x75\x2A\x33\xC0\x8B\x4D\x20"
                /* 55 8B EC 56 8B F1 83 BE D0 13 00 00 00 75 ? E8 ? ? ? ? 85 C0 74 ? 8B CE E8 ? ? ? ? 8B 86 D0 13 00 00 5E 85 C0 74 ? 83 38 00 75 ? 33 C0 8B 4D 20 */
            }

            // windows sig:
            // find CTerrorPlayer::OnRideEnded by string "jockey_ride_end"
            // down the buttom of the function the call that passes (1.0, 0.0) is it.
            "CBaseAnimating::SetModelScale"
            {
                "library"   "server"
                "linux"     "@_ZN14CBaseAnimating13SetModelScaleEff"
                "windows"   "\x55\x8B\xEC\xF3\x0F\x10\x45\x0C\x0F\x2F\x05\x2A\x2A\x2A\x2A"
                /* 55 8B EC F3 0F 10 45 0C 0F 2F 05 ? ? ? ? */
            }

            "CBaseAnimating::LookupBone"
            {
                "library"   "server"
                "linux"     "@_ZN14CBaseAnimating10LookupBoneEPKc"
            }

            // windows sig:
            // find CTankClaw::DoSwing like above.
            // down the buttom of the function, inside of the 'if' statement "if ( result < 0 )"
            // the call that passes 4 params is it.
            "CBaseAnimating::GetBonePosition"
            {
                "library"   "server"
                "linux"     "@_ZN14CBaseAnimating15GetBonePositionEiR6VectorR6QAngle"
                "windows"   "\x55\x8B\xEC\x83\xEC\x34\xA1\x2A\x2A\x2A\x2A\x33\xC5\x89\x45\xFC\x53\x8B\x5D\x10"
                /* 55 8B EC 83 EC 34 A1 ? ? ? ? 33 C5 89 45 FC 53 8B 5D 10 */
            }

            // windows sig:
            // search for string "Bogus constraint %s (attaches %s to ENTITY NOT FOUND:%s)\n" to find CPhysConstraint::GetConstraintObjects
            // inside of it the first call is FindPhysicsAnchor, click into it.
            // notice this 'if' statement "if ( v12 < (int)v21 )", the second call above is CBaseAnimating::GetAttachmentBone.
            "CBaseAnimating::GetAttachmentBone"
            {
                "library"   "server"
                "linux"     "@_ZN14CBaseAnimating17GetAttachmentBoneEi"
                "windows"   "\x55\x8B\xEC\x56\x8B\xF1\x83\xBE\xD0\x13\x00\x00\x00\x57\x75\x2A\xE8\x2A\x2A\x2A\x2A\x85\xC0\x74\x2A\x8B\xCE\xE8\x2A\x2A\x2A\x2A\x8B\xB6\xD0\x13\x00\x00\x85\xF6\x74\x2A\x83\x3E\x00\x74\x2A\x8B\x7D\x08\x83\xFF\x01"
                /* 55 8B EC 56 8B F1 83 BE D0 13 00 00 00 57 75 ? E8 ? ? ? ? 85 C0 74 ? 8B CE E8 ? ? ? ? 8B B6 D0 13 00 00 85 F6 74 ? 83 3E 00 74 ? 8B 7D 08 83 FF 01 */
            }

            // windows sig:
            // search for string "Data manager 'used' memory incorrect\n" to find CDataManagerBase::GetForFreeByIndex
            // go xref it, the second call should be CDataManagerBase::EnsureCapacity
            // go xref it, the only call should be Studio_CreateBoneCache
            // go xref it, the only call should be CBaseAnimating::GetBoneCache
            "CBaseAnimaitng::GetBoneCache"
            {
                "library"   "server"
                "linux"     "@_ZN14CBaseAnimating12GetBoneCacheEv"
                "windows"   "\x53\x8B\xDC\x83\xEC\x08\x83\xE4\xF0\x83\xC4\x04\x55\x8B\x6B\x04\x89\x6C\x24\x04\x8B\xEC\xB8\x28\x18\x00\x00"
                /* 53 8B DC 83 EC 08 83 E4 F0 83 C4 04 55 8B 6B 04 89 6C 24 04 8B EC B8 28 18 00 00 */
            }

            // windows sig:
            // follow the guide of CBaseAnimating::GetAttachmentBone, you will see CBaseAnimating::GetPhysicsBone is lying under the CBaseAnimating::GetAttachmentBone.
            "CBaseAnimating::GetPhysicsBone"
            {
                "library"   "server"
                "linux"     "@_ZN14CBaseAnimating14GetPhysicsBoneEi"
                "windows"   "\x55\x8B\xEC\x56\x8B\xF1\x83\xBE\xD0\x13\x00\x00\x00\x75\x2A\xE8\x2A\x2A\x2A\x2A\x85\xC0\x74\x2A\x8B\xCE\xE8\x2A\x2A\x2A\x2A\x8B\x8E\xD0\x13\x00\x00\x5E"
                /* 55 8B EC 56 8B F1 83 BE D0 13 00 00 00 75 ? E8 ? ? ? ? 85 C0 74 ? 8B CE E8 ? ? ? ? 8B 8E D0 13 00 00 5E */
            }

            // windows sig:
            // search for string "prop_ragdoll" to find all occurances, the 6th call should be CreateServerRagdoll
            // (a big function with only "prop_ragdoll" single string involved)
            // down the buttom of the function, notice the 'if' statement "if ( v39 > 0 )" with a caculation stuff "v78 = 1.0 / v42;" above,
            // inside of this 'if' statement, the first call in this loop is CBaseAnimating::GetHitboxBone.
            "CBaseAnimating::GetHitboxBone"
            {
                "library"   "server"
                "linux"     "@_ZN14CBaseAnimating13GetHitboxBoneEi"
                "windows"   "\x55\x8B\xEC\x56\x8B\xF1\x83\xBE\xD0\x13\x00\x00\x00\x75\x2A\xE8\x2A\x2A\x2A\x2A\x85\xC0\x74\x2A\x8B\xCE\xE8\x2A\x2A\x2A\x2A\x8B\x86\xD0\x13\x00\x00\x85\xC0\x74\x2A\x83\x38\x00\x74\x2A\x8B\x08"
                /* 55 8B EC 56 8B F1 83 BE D0 13 00 00 00 75 ? E8 ? ? ? ? 85 C0 74 ? 8B CE E8 ? ? ? ? 8B 86 D0 13 00 00 85 C0 74 ? 83 38 00 74 ? 8B 08 */
            }

            // windows sig:
            // search for string "blood_impact_arterial_spray" to find Boomer::DoBloodEffect
            // down in the 'switch' statement, every cases call CBaseAnimating::LookupAttachment.
            "CBaseAnimating::LookupAttachment"
            {
                "library"   "server"
                "linux"     "@_ZN14CBaseAnimating16LookupAttachmentEPKc"
                "windows"   "\x55\x8B\xEC\x56\x8B\xF1\x83\xBE\xD0\x13\x00\x00\x00\x75\x2A\xE8\x2A\x2A\x2A\x2A\x85\xC0\x74\x2A\x8B\xCE\xE8\x2A\x2A\x2A\x2A\x8B\x86\xD0\x13\x00\x00\x5E\x85\xC0\x74\x2A\x83\x38\x00\x75\x2A\x33\xC0\x5D\xC2\x04\x00\x8B\x4D\x08"
                /* 55 8B EC 56 8B F1 83 BE D0 13 00 00 00 75 ? E8 ? ? ? ? 85 C0 74 ? 8B CE E8 ? ? ? ? 8B 86 D0 13 00 00 5E 85 C0 74 ? 83 38 00 75 ? 33 C0 5D C2 04 00 8B 4D 08 */
            }

            // windows sig:
            // search for string "smoker_mouth" find the only call which is CTongue::GetSegmentStart
            // the call under the call that passes "smoker_mouth" is CBaseAnimating::GetAttachment
            "CBaseAnimating::GetAttachment"
            {
                "library"   "server"
                "linux"     "@_ZN14CBaseAnimating13GetAttachmentEiR6VectorR6QAngle"
                "windows"   "\x55\x8B\xEC\x83\xEC\x34\xA1\x2A\x2A\x2A\x2A\x33\xC5\x89\x45\xFC\x8B\x01\x8B\x80\x6C\x03\x00\x00\x53"
                /* 55 8B EC 83 EC 34 A1 ? ? ? ? 33 C5 89 45 FC 8B 01 8B 80 6C 03 00 00 53 */
            }

            //--------------------------------
            // CStudioHdr functions
            //--------------------------------

            // windows sig:
            // find CModelSoundsCache::Rebuild on its own vtable (offset 2)
            // the first call is it.
            "ModelSoundsCache_LoadModel"
            {
                "library"   "server"
                "linux"     "@_Z26ModelSoundsCache_LoadModelPKc"
                "windows"   "\x55\x8B\xEC\x8B\x0D\x2A\x2A\x2A\x2A\x8B\x01\x8B\x55\x08\x8B\x40\x14"
                /* 55 8B EC 8B 0D ? ? ? ? 8B 01 8B 55 08 8B 40 14 */
            }

            // windows sig:
            // same as above, the third call is it.
            "ModelSoundsCache_FinishModel"
            {
                "library"   "server"
                "linux"     "@_Z28ModelSoundsCache_FinishModelP10CStudioHdr"
                "windows"   "\x55\x8B\xEC\x56\x8B\x75\x08\x85\xF6\x74\x2A\x8B\xCE\xE8\x2A\x2A\x2A\x2A\x8D\x4E\x40"
                /* 55 8B EC 56 8B 75 08 85 F6 74 ? 8B CE E8 ? ? ? ? 8D 4E 40 */
            }

            // windows sig:
            // find CBaseAnimating::GetAttachmentBone like above.
            // down the end of the function see this statement "if ( v3 && *v3 && a2 >= 1 && a2 <= sub_101E3D80(v3) )"
            // the call is CStudioHdr::GetNumAttachments
            "CStudioHdr::GetNumAttachments"
            {
                "library"   "server"
                "linux"     "@_ZNK10CStudioHdr17GetNumAttachmentsEv"
                "windows"   "\x8B\x41\x04\x85\xC0\x75\x2A\x8B\x01\x8B\x80\xF0\x00\x00\x00"
                // may vary?
                /* 8B 41 04 85 C0 75 ? 8B 01 8B 80 F0 00 00 00 */
            }

            //-------------------
            // Static functions
            //-------------------

            // windows sig:
            // search for string "vcd error, gesture %s of model %s is marked as STUDIO_LOOPING!\n" to find CBaseFlex::HandleStartGestureSceneEvent
            // (or any other long strings)
            // down the buttom of the function, this string (above) is in a 'if' statement, the call in the statement is GetSequenceFlags.
            "GetSequenceFlags"
            {
                "library"   "server"
                "linux"     "@_Z16GetSequenceFlagsP10CStudioHdri"
                "windows"   "\x55\x8B\xEC\x56\x57\x8B\x7D\x08\x85\xFF\x74\x2A\x8B\xCF\xE8\x2A\x2A\x2A\x2A\x84\xC0\x74\x2A\x8B\x75\x0C\x85\xF6\x78\x2A\x8B\xCF\xE8\x2A\x2A\x2A\x2A\x3B\xF0\x7D\x2A\x56\x8B\xCF\xE8\x2A\x2A\x2A\x2A\x8B\x40\x0C"
                /*  55 8B EC 56 57 8B 7D 08 85 FF 74 ? 8B CF E8 ? ? ? ? 84 C0 74 ? 8B 75 0C 85 F6 78 ? 8B CF E8 ? ? ? ? 3B F0 7D ? 56 8B CF E8 ? ? ? ? 8B 40 0C*/
            }

            // windows sig:
            // search for string "***\nShared activity collision! %s<->%s\n***\n".
            "ActivityList_RegisterSharedActivity"
            {
                "library"   "server"
                "linux"     "@_Z35ActivityList_RegisterSharedActivityPKci"
                "windows"   "\x55\x8B\xEC\x56\x8B\x75\x0C\x57\x8B\x7D\x08\x57"
                /* 55 8B EC 56 8B 75 0C 57 8B 7D 08 57 */
            }

            // windows sig:
            // search for string "***\nShared<->Private Activity collision!\n***\n"
            "ActivityList_RegisterPrivateActivity"
            {
                "library"   "server"
                "linux"     "@_Z36ActivityList_RegisterPrivateActivityPKc"
                "windows"   "\x55\x8B\xEC\x57\x8B\x7D\x08\x57\xB9\x2A\x2A\x2A\x2A"
                /* 55 8B EC 57 8B 7D 08 57 B9 ? ? ? ? */
            }

            // windows sig:
            // search for string "ValveBiped.bip01_pelvis" to find InfectedDying::TryToStartDeathThroes
            // just down there a string named "Head" is below "ValveBiped.bip01_pelvis"
            // notice the 'if' statement "if ( v12 == -1 )" is below the string "Head"
            // inside of it the second call is ActivityList_IndexForName.
            "ActivityList_IndexForName"
            {
                "library"   "server"
                "linux"     "@_Z25ActivityList_IndexForNamePKc"
                "windows"   "\x55\x8B\xEC\x8B\x45\x08\x50\xB9\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x85\xC0\x78\x2A\x8B\x0D\x2A\x2A\x2A\x2A"
                /* 55 8B EC 8B 45 08 50 B9 ? ? ? ? E8 ? ? ? ? 85 C0 78 ? 8B 0D ? ? ? ? */
            }

            // windows sig: 
            // search for string "ACT_INVALID" to find the only call with "mov" opcode, this is CAI_BaseNPC::GetActivityName.
            // it has the only call in it, which is ActivityList_NameForIndex.
            "ActivityList_NameForIndex"
            {
                "library"   "server"
                "linux"     "@_Z25ActivityList_NameForIndexi"
                "windows"   "\x55\x8B\xEC\x8B\x15\x2A\x2A\x2A\x2A\x33\xC0"
                /* 55 8B EC 8B 15 ? ? ? ? 33 C0 */
            }
        }
    }
}